from twisted.internet.protocol import Protocol, Factory, ClientFactory
from twisted.internet.defer import Deferred
from twisted.internet import reactor
from petlib.cipher import Cipher
import random, sys

#http://stackoverflow.com/questions/3275004/how-to-write-a-twisted-server-that-is-also-a-client
Keys = namedtuple('Keys', ['b', 'iv', 'kmac', 'kenc', 'seed'])
Actor = namedtuple('Mix', ['name', 'port', 'host', 'pubk'])

class Mix():
# Object creating a mix server (client + server) with shuffling and encrypting capabilities

	cascade = True

	def __init__(self, name, port, ip, cascade, layered, group, pubk, prvk, pubs, shared):
		print "Mix: init"
		self.name = name 		# Name of the mix
		self.port = port 		# Port of the mix
		self.ip = ip	 		# IP of the mix

		self.cascade = cascade		# Cascade or Parallel Mix
		self.layered = layered		# Layered or Rebuild Method

		self.group = group 	# G o g o.byte
		self.pubk = pubk	# Public key of the mix
		self.prvk = prvk	# Private key of the mix

		self.pubs = pubs	# Servers and client's public keys
		self.shared_secrets = shared # Shared secrets 

		self.s_factory = ServerFact(self)
		reactor.listenTCP(self.port, self.s_factory)
		reactor.run()

	def permute(self, seed, data, inverse):
		""" Permute list of elements"""
		""" INPUT: seed, long, the permutation seed""""
		""" INPUT: data, array, the list of datablocks to permute""""
		""" INPUT: inverse, bool, if true execute Pi_seed^-1 else Pi_seed""""
		""" OUTPUT: the list of permuted datablock"""
		random.seed(seed)
		perm = random.sample(range(len(data)),len(data))
		temp=[]
		if not inverse:
			for i in range(len(perm)):
				temp.extend([data[perm[i]]])
		else:
			zipped = zip(perm, data)
			zipped.sort(key= lambda t: t[0])
			temp = list(zip(*zipped)[1])
		return temp

	def permute_global(self, seed, n, m, index, inverse):
		""" Compute which indices to send to which mix, used only in parallel case"""
		""" INPUT: seed, long, the new public permutation seed""""
		""" INPUT: n, long, the total number of elements""""
		""" INPUT: m, int, the total number of mixes""""
		""" INPUT: index, int, the current mix position in the list of mixes""""
		""" INPUT: inverse, bool, if true execute Pi_seed^-1 else Pi_seed""""
		""" OUTPUT: the list of list of indices (output[i]=list of indices to send to mix_i)"""
		random.seed(seed)
		tosend=[]
		temp=permute(seed, range(1,n), inverse)	
		tosend = self.split(temp, n/m)			
		for i in range(len(tosend)):
			tosend[i]= [tosend[i][j] for j in range(len(tosend[i])) if tosend[i][j] in range(index*n/m, (index+1)*n/m)]
		return tosend

	def sort_global(self, seed, data, inverse):
		""" Merge and sort data arrays sent by each mix, [[mix 1],...,[mix n]]-->[i*n/m,... (i+1)*n/m-1]"""
		""" INPUT: seed, long, the old public permutation seed""""
		""" INPUT: data, arrays of arrays, the ordered list of records received""""
		""" INPUT: inverse, bool, if true execute Pi_seed^-1 else Pi_seed""""
		""" OUTPUT: the list of elemts permuted according to Pi_seed(^-1)"""
		data = [j for i for data for k in i]
		order = self.permute_global(previous_seed, n, m, index, inverse)
		order = [j for i for order for k in i]
		zipped = zip(order, data)
		zipped.sort(key= lambda t: t[0])
		data = list(zip(*zipped)[1])
		return data
		
	def split(self, tosplit, k):
		""" Split a list tosplit in list of max k elements """
		""" INPUT: tosplit, array, list to split"""
		""" INPUT: k, int, number of elements per split arrays """"
		""" OUTPUT: the list of split arrays of k elements """
		return [tosplit[i:i+k] for i in range(0, len(tosplit), k)]

	def encrypt_ctr(self, key, counter, data):
		""" Encrypt/Decrypt data with AES in CTR mode """
		""" INPUT: key, 16byte long encryption key """
		""" INPUT: counter, 16 byte long counter """
		""" INPUT: data, data to encrypt """
		""" OUTPUT: encrypted data """
		aes = Cipher("AES-128-CTR")
		enc = aes.enc(key, counter)
		output = enc.update(data)
		output += enc.finalize()
		return output

	def encrypt_cbc(self, key, datablock):
		""" Encrypt datablock (IV and data) with AES in CBC mode """
		""" INPUT: key, 16byte long encryption key """
		""" INPUT: datablock, datablock=IV,data to encrypt """
		""" OUTPUT: encrypted data """
		IV, data = datablock
		IV0 = #TODO
		data = self.aes_cbc(key, IV0, data)
		IV1 = #TODO
		data = self.aes_cb(key,IV1, IV)
		datablock = [IV, data]
		return datablock

	def aes_cbc(self, key, IV, data):
		""" Encrypt/Decrypt data with AES in CBC mode """
		""" INPUT: key, 16byte long encryption key """
		""" INPUT: IV, 16 byte long initialization vector """
		""" INPUT: data, data to encrypt """
		""" OUTPUT: encrypted data """
		aes = Cipher("AES-128-CBC")
		enc = aes.enc(key, IB)
		output = enc.update(data)
		output += enc.finalize()
		return output		


	def cascade_layered(self, instructions, data):
		if not inverse:
			self.permute(seed, data, inverse)
		for i in range(len(data)):
			data[i]=self.encrypt_cbc(key, data[i])
		if inverse:
			self.permute(seed, data, inverse)
		return data

	def cascade_rebuild(self, instructions, data):
		
		if not inverse:
			self.permute(seed, data, inverse)
		for i in range(len(data)):
			data[i]=self.encrypt_ctr(key, i, data[i])
		if inverse:
			self.permute(seed, data, inverse)
		return data

	def parallel_layered(self, instructions, data):

		data = sort_global( seed, data, inverse)
		if not inverse:
			self.permute(seed, data, inverse)
		for i in range(len(data)):
			data[i]=self.encrypt_cbc(key, i, data[i])
		if inverse:
			self.permute(seed, data, inverse)
		return data

	def parallel_rebuild(self, instructions, data):	

		data = sort_global( seed, data, inverse)
		if not inverse:
			self.permute(seed, data, inverse)
		for i in range(len(data)):
			data[i]=self.encrypt_ctr(key, i, data[i])
		if inverse:
			self.permute(seed, data, inverse)
		return data	

class ServerProto(Protocol):

	def __init__(self):
		print "SP: init"

	def connectionMade(self):
		print "SF: Connection made"
		self.factory.s_protos.append(self)

	def dataReceived(self, data):
		print "SF: Data received", data
		
		print "encrypt"
		print "sort"
		#cipher = self.mix.encrypt(data)
		#processed_data = self.mix.sort(cipher)
		pdata = data +"_processedS_"
		print pdata
		c_factory = ClientFact(self, pdata)
		c_factory.protocol = ClientProto
		#reactor.connectTCP(self.pub[][], self.pub[][], c_factory) #TODO
		reactor.connectTCP("127.0.0.1", int(self.factory.mix.pub), c_factory)

		#c_factory.c_proto.transport.write(data+"_processedS_")
		#print "data written"

	def connectionLost(self, reason):
	        print "SF: Connection lost", reason

	def returnData(self, data):
		self.transport.write(data+"_fromS2_") #TODO
		#self.flush()
		self.transport.loseConnection()

	def processData(self, data):
		print "in processData"
		#Parse & Calculate
		#Encrypt
		#Permute

class ServerFact(Factory):
	protocol = ServerProto

	def __init__(self, mix):
		print "SF: init"
		self.mix = mix
		self.s_protos = []

class ClientProto(Protocol):

	def __init__(self):
		print "CP: init"

	def connectionMade(self):
		print "CP: Connection made"
		self.factory.c_proto = self
		self.transport.write(self.factory.data)

	def dataReceived(self, data):
        	print "CP: Receive:", data
		self.factory.s_proto.returnData(data+"_processedC_")
		self.transport.loseConnection()

	def connectionLost(self, reason):
        	print "CP: Connection lost", reason

class ClientFact(ClientFactory):
	protocol = ClientProto

	def __init__(self, s_proto, data):
		print "CF: init"
		self.done = Deferred()
		self.s_proto = s_proto
		self.c_proto = None
		self.data = data

	def clientConnectionFailed(self, connector, reason):
	        print 'CF: Connection failed:', reason.getErrorMessage()
	        self.done.errback(reason)

	def clientConnectionLost(self, connector, reason):
	        print 'CF: Connection lost:', reason.getErrorMessage()
	        self.done.callback(None)


if __name__ == '__main__':
	if len(sys.argv) <6:
		print "ERROR: you have entered "+len(sys.argv)+" inputs."
	else:
   
        	mix = Mix(str(sys.argv[1]), int(sys.argv[2]), sys.argv[3], sys.argv[4], sys.argv[5])
		# name port ip group pub
